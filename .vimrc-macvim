"
" .vimrc File
" Maintained by: Jeffrey Way
" jeffrey@jeffrey-way.com
"
" modified by Joshua Cottrell for personal use

"Pathogen, it's supposed to be good (?)
call pathogen#infect()
"Forget compatibility with Vi. Who cares.
set nocompatible

" Make <leader> easier to type
let mapleader=","

"Don't worry about the .swp and .swo swap files
set nobackup
set nowritebackup
set noswapfile

"Enable filetypes
filetype on
filetype plugin on
filetype indent on

"Write the old file out when switching between files.
set autowrite

"Display current cursor position in lower right corner.
set ruler

"Ever notice a slight lag after typing the leader key + command? This lowers
"the timeout.
" set timeoutlen=500

"Switch between buffers without saving
set hidden

"Set the color scheme. Change this to your preference. 
"Here's 100 to choose from: http://www.vim.org/scripts/script.php?script_id=625
colorscheme vividchalk " http://www.vi-improved.org/color_sampler_pack/ for colors; also good: ekvoli, vividchalk but mostly inkpot

"Set font type and size. Depends on the resolution. Larger screens, prefer h15
" set guifont=Courier:h15
set guifont=Menlo:h13
" set guifont=Inconsolata:h17 " http://code.google.com/webfonts/specimen/Inconsolata
" set guifont=Cosmic\ Sans\ Neue\ Mono:h15 " https://github.com/belluzj/cosmic-sans-neue

" Syntax highlighting
syntax on
" Syntastic checker
let g:syntastic_php_checkers = ['php', 'phpcs', 'phpmd']
" vim-phpcs (github.com/bpearson/vim-phpcs) based on
"   (github.com/squizlabs/PHP_CodeSniffer)
nnoremap <leader>cs :CodeSniff<CR>
" vim-php-cs-fixer (github.com/stephpy/vim-php-cs-fixer) based on
"   (github.com/FriendsOfPHP/PHP-CS-Fixer)
" If php-cs-fixer is in $PATH, you don't need to define line below
let g:php_cs_fixer_path = "~/bin/php-cs-fixer.phar" " define the path to the php-cs-fixer.phar
let g:php_cs_fixer_level = "psr2"              " which level ?
let g:php_cs_fixer_config = "default"             " configuration
let g:php_cs_fixer_php_path = "php"               " Path to PHP
" If you want to define specific fixers:
"let g:php_cs_fixer_fixers_list = "linefeed,short_tag,indentation"
let g:php_cs_fixer_enable_default_mapping = 1     " Enable the mapping by default (<leader>pcd)
let g:php_cs_fixer_dry_run = 0                    " Call command with dry-run option
let g:php_cs_fixer_verbose = 0                    " Return the output of command if 1, else an inline information.

"Tab stuff
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab

"Show command in bottom right portion of the screen
set showcmd

"Show lines numbers
set number

"Prefer relative line numbering?
"set relativenumber"

"Indent stuff
set smartindent
set autoindent

"Statusline definition
set statusline=
set statusline=%t				" tail - file name
set statusline+=\ %m			" modified - if current buffer has been modified
set statusline+=\ %{FileSize()}	" file size, see function below
set statusline+=\ %{fugitive#statusline()}	" git repository status through fugitive plugin
set statusline+=\ (%n)			" buffer number
set statusline+=\ %y			" filetype
" set statusline+=\ %{PartialPath()}
" set statusline+=\ %{fnamemodify(":t",":p:h")}
set statusline+=%=				" --right align--
set statusline+=%c%V			" cursor column, virtual column number
set statusline+=\|%l,%L			" cursor line, total lines
set statusline+=\ %10.10P		" cursor file percentage through file
" set statusline=%t\ %m\ %{FileSize()}\ %{fugitive#statusline()}%=%c-%v\|%l,%L\ %10.10P
" set statusline=[%n]\ %<%.99f\ %h%w%m%r%{exists('*CapsLockStatusline')?CapsLockStatusline():''}%y%=%-16(\ %l,%c-%v\ %)%P
function! FileSize()
	let bytes = getfsize(expand("%p"))
	if bytes <= 0
		return ""
	endif
	return bytes
endfunction

"Always show the status line
set laststatus=2

"Prefer a slightly higher line height
set linespace=3

"Better line wrapping 
" set nowrap
" set textwidth=79
set wrap linebreak nolist
set formatoptions=qrn1

" Set the $ character to mark the end of your change (in normal mode do ciw while on "somewords" and get "|someword$" where | is the cursor and $ is the end of the section you're changing)
set cpoptions+=$

"Set incremental searching"
set incsearch

"Highlight searching
set hlsearch

" case insensitive search
set ignorecase
set smartcase

"Hide MacVim toolbar by default
set go-=T

"Hard-wrap paragraphs of text
nnoremap <leader>q gqip

"Enable code folding
set foldenable

"Hide mouse when typing
set mousehide

" Show/hide hidden characters and redefine the hidden characters
nmap <leader>l :set list!<CR>
set listchars=tab:▸\ ,eol:¬

" Set the language for spell check
set spelllang=en_us

" Gundo sjl.bitbucket.org/gundo.vim/
nnoremap <F5> :GundoToggle<CR>

if has("autocmd")
	" Delete whitespace at the end of every line before saving according to a whitelist
	autocmd BufWritePre *.txt,*.php,*.rb,*.htmlrb,*.html,*.py,*.js :call <SID>StripTrailingWhitespaces()
	" Try wrapping text at 72 characters for git commit messages (http://web-design-weekly.com/2013/09/01/a-better-git-commit/)
	autocmd Filetype gitcommit set spell textwidth=72
	"Automatically change current directory to that of the file in the buffer
	autocmd BufEnter * cd %:p:h
	" more auto-completion, by language
	" http://www.brankovukelic.com/post/2091037293/turn-vim-into-powerful-javascript-editor
	" Ctrl+Shift+c, Ctrl+Shift+o (other commands are in the article)
	autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
	autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
	autocmd FileType css set omnifunc=csscomplete#CompleteCSS
	" js
	autocmd FileType javascript noremap <buffer> <c-f> :call JsBeautify()<cr>
	" css
	autocmd FileType css noremap <buffer> <c-f> :call CSSBeautify()<cr>
	" html
	autocmd FileType html noremap <buffer> <c-f> :call HtmlBeautify()<cr>

end
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

"Shortcut to fold tags with leader (usually \) + ft
nnoremap <leader>ft Vatzf

" Create dictionary for custom expansions
" set dictionary+=/Users/jeff_way/.vim/dict.txt

"Opens a vertical split and switches over (\v)
nnoremap <leader>v <C-w>v<C-w>l

" File explorer, netrw
let g:netrw_altv      = 1
let g:netrw_preview   = 1
let g:netrw_liststyle = 3
let g:netrw_winsize   = 80
nnoremap <leader>f :40Vex<cr>

" File searcher - ctrlp
let g:ctrlp_map = '<leader>p'

"Split windows below the current window.
set splitbelow              

" session settings
set sessionoptions=resize,winpos,winsize,buffers,tabpages,folds,curdir,help

"Shortcut for editing  vimrc file in a new tab
nmap ,ev :tabedit $MYVIMRC<cr>

"Shortcut to enable/disable spell check and set spell check language
nmap <silent> <leader>s :set spell!<CR>
set spelllang=en_us

"Map code completion to \ + tab
imap <leader><tab> <C-x><C-o>

" More useful command-line completion
set wildmenu

"Auto-completion menu
set wildmode=list:longest

" jshint and csslint run with the lint.vim plugin but get annoying so we can
" disable them here
let disable_lint=1

"Macro to remove hosts junk added automatically
let @g = 'd/^#:noh:set filetype=conf'

"http://vim.wikia.com/wiki/Make_Vim_completion_popup_menu_work_just_like_in_an_IDE
set completeopt=longest,menuone
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
inoremap <expr> <C-n> pumvisible() ? '<C-n>' :
  \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
inoremap <expr> <M-,> pumvisible() ? '<C-n>' :
  \ '<C-x><C-o><C-n><C-p><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

"Delete all buffers (via Derek Wyatt)
" nmap <silent> ,da :exec "1," . bufnr('$') . "bd"<cr>

" Indention, especially for visual mode
nmap <D-[> <<
nmap <D-]> >>
vmap <D-[> <gv
vmap <D-]> >gv

" Source the vimrc file after saving it. This way, you don't have to reload
" Vim to see the changes.
" -- Think this works automatically --
" if has("autocmd")
"   autocmd bufwritepost .vimrc source $MYVIMRC
" endif

" Save folds when closing a buffer and reopen them when opening the file again
"au BufWinLeave * mkview
"au BufWinEnter * silent loadview
set viewoptions=folds "only save folds, normally saves folds, options, cursor
au BufWinLeave * silent! mkview
au BufWinEnter * silent! loadview

"
" easier window navigation
" nmap <C-h> <C-w>h
" nmap <C-j> <C-w>j
" nmap <C-k> <C-w>k
" nmap <C-l> <C-w>l

"Helpeful abbreviations
iab lorem Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
iab llorem Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. 
iab jqcdn http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js

"Spelling corrects. Just for example. Add yours below.
iab teh the
iab Teh The
